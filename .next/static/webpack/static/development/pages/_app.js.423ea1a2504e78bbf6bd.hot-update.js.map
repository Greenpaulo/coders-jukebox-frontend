{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.423ea1a2504e78bbf6bd.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import { GlobalContext, GlobalProvider } from '../context/GlobalState';\r\n// import { login } from '../context/Actions';\r\nimport Layout from '../components/Layout';\r\nimport { useState } from 'react';\r\n\r\n// import gql from 'graphql-tag';\r\n\r\n\r\nconst App = ({ Component, pageProps }) => {\r\n\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    authData: null\r\n  });\r\n\r\n  const [userState, setUserState] = useState({\r\n    user: null\r\n  });\r\n\r\n  const [videoState, setVideoState] = useState({\r\n    video: null\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n\r\n  // Auth actions\r\n  const login = async (email, password) => {\r\n    console.log('login action called in _app.js')\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      console.log(res.status);\r\n\r\n      // if(res.status != 200 || res.status != 201) {\r\n      //   throw new Error('Login failed!');\r\n      // } \r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      console.log(data)\r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    // const LOGIN_QUERY = gql`\r\n    //   query LoginQuery{\r\n    //     login(email: ${email}, password: ${password}) {\r\n    //       userId,\r\n    //       token\r\n    //     }\r\n    //   }\r\n    // `;\r\n    // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n  \r\n  \r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      authState,\r\n      userState,\r\n      videoState,\r\n      commentState,\r\n      login\r\n    }}>\r\n      <Layout>\r\n        <Component {...pageProps} />\r\n      </Layout>\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAAA;AACA;AADA;AAQA;AADA;AAPA;AAAA;AACA;AADA;AAYA;AADA;AAXA;AAAA;AACA;AADA;AAgBA;AADA;AAfA;AAAA;AACA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAJA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AADA;AAHA;AACA;AAjBA;AAgBA;AAQA;AAGA;AACA;AAEA;AACA;AA/BA;AAAA;AACA;AADA;AA+BA;AAEA;AAjCA;AAAA;AACA;AADA;AAAA;AAAA;AAoCA;AACA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}