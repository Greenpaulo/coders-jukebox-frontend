{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\context\\\\GlobalState.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useReducer } from 'react'; // import gql from 'graphql-tag';\n\nimport AppReducer from './AppReducer'; // import { useQuery } from '@apollo/react-hooks';\n// Actions\n\nconst login = (email, password) => {\n  // Make a API query to get a token\n  // const LOGIN_QUERY = gql`\n  //   query LoginQuery{\n  //     login(email: ${email}, password: ${password}) {\n  //       userId,\n  //       token\n  //     }\n  //   }\n  // `;\n  // const { data } = useQuery(LOGIN_QUERY);\n  dispatch({\n    type: 'LOGIN',\n    payload: {\n      data\n    }\n  });\n}; // Inital State\n\n\nconst initialState = {\n  authenticated: false,\n  authData: null,\n  user: null,\n  video: null,\n  comment: null,\n  login: login()\n}; // Create context\n\nexport const GlobalContext = createContext(initialState); // Provider Component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(AppReducer, initialState);\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      // authenticated: state.authenticated,\n      login: login\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/context/GlobalState.js"],"names":["createContext","useReducer","AppReducer","login","email","password","dispatch","type","payload","data","initialState","authenticated","authData","user","video","comment","GlobalContext","GlobalProvider","children","state"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAAyC,OAAzC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;AAEA;;AACA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAE,OADC;AAEPC,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AAFF,GAAD,CAAR;AAMD,CAnBD,C,CAqBA;;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,OAAO,EAAE,IALU;AAMnBZ,EAAAA,KAAK,EAAEA,KAAK;AANO,CAArB,C,CASA;;AACA,OAAO,MAAMa,aAAa,GAAGhB,aAAa,CAACU,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMO,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAE9C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQb;AAAR,MAAoBL,UAAU,CAACC,UAAD,EAAaQ,YAAb,CAApC;AAIA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7B;AACAP,MAAAA,KAAK,EAAEA;AAFsB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGe,QAJH,CADF;AAQD,CAdM","sourcesContent":["import { createContext, useReducer} from 'react';\r\n// import gql from 'graphql-tag';\r\nimport AppReducer from './AppReducer';\r\n// import { useQuery } from '@apollo/react-hooks';\r\n\r\n// Actions\r\nconst login = (email, password) => {\r\n\r\n  // Make a API query to get a token\r\n  // const LOGIN_QUERY = gql`\r\n  //   query LoginQuery{\r\n  //     login(email: ${email}, password: ${password}) {\r\n  //       userId,\r\n  //       token\r\n  //     }\r\n  //   }\r\n  // `;\r\n  // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n  dispatch({\r\n    type: 'LOGIN',\r\n    payload: {\r\n      data\r\n    }\r\n  });\r\n}\r\n\r\n// Inital State\r\nconst initialState = {\r\n  authenticated: false,\r\n  authData: null,\r\n  user: null,\r\n  video: null,\r\n  comment: null,\r\n  login: login()\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n  \r\n  const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n  \r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      // authenticated: state.authenticated,\r\n      login: login\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}