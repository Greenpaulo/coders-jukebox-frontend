{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\pages\\\\_app.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GlobalContext, GlobalProvider } from '../context/GlobalState'; // import { login } from '../context/Actions';\n\nimport Layout from '../components/Layout';\nimport { useState } from 'react'; // import gql from 'graphql-tag';\n\nvar App = function App(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState({\n    authenticated: false,\n    userId: null,\n    token: null,\n    tokenExpiration: null\n  }),\n      authState = _useState[0],\n      setAuthState = _useState[1];\n\n  var _useState2 = useState({\n    user: null\n  }),\n      userState = _useState2[0],\n      setUserState = _useState2[1];\n\n  var _useState3 = useState({\n    video: null\n  }),\n      videoState = _useState3[0],\n      setVideoState = _useState3[1];\n\n  var _useState4 = useState({\n    comment: null\n  }),\n      commentState = _useState4[0],\n      setCommentState = _useState4[1]; // Auth actions\n\n\n  var login = function login(email, password) {\n    var requestBody, res, data, _data$data$login, userId, token;\n\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setAuthState(_objectSpread({}, authState, {\n              authenticated: true\n            }));\n            console.log('login action called in _app.js'); // Make a API query to get a token\n\n            requestBody = {\n              query: \"\\n        query {\\n          login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\") {\\n            userId,\\n            token\\n          }\\n        }\\n      \")\n            };\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:5000/graphql', {\n              method: 'POST',\n              body: JSON.stringify(requestBody),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 6:\n            res = _context.sent;\n            console.log(res.status); // if(res.status != 200 || res.status != 201) {\n            //   throw new Error('Login failed!');\n            // } \n            // .json() is a method from fetch API that auto extracts & parses the res body\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 10:\n            data = _context.sent;\n\n            if (!data.errors) {\n              _context.next = 14;\n              break;\n            }\n\n            data.errors.map(function (error) {\n              console.log(error.message);\n            });\n            return _context.abrupt(\"return\");\n\n          case 14:\n            // Set state with returned auth data\n            _data$data$login = data.data.login, userId = _data$data$login.userId, token = _data$data$login.token;\n            console.log(data.data.login.userId); // setAuthState({...authState, authenticated: true, userId: userId, token});\n\n            console.log(authState);\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 19]], Promise);\n  };\n\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      authState: authState,\n      userState: userState,\n      videoState: videoState,\n      commentState: commentState,\n      login: login\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/pages/_app.js"],"names":["GlobalContext","GlobalProvider","Layout","useState","App","Component","pageProps","authenticated","userId","token","tokenExpiration","authState","setAuthState","user","userState","setUserState","video","videoState","setVideoState","comment","commentState","setCommentState","login","email","password","console","log","requestBody","query","fetch","method","body","JSON","stringify","headers","res","status","json","data","errors","map","error","message"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,wBAA9C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAA8B;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBAENH,QAAQ,CAAC;AACzCI,IAAAA,aAAa,EAAE,KAD0B;AAEzCC,IAAAA,MAAM,EAAE,IAFiC;AAGzCC,IAAAA,KAAK,EAAE,IAHkC;AAIzCC,IAAAA,eAAe,EAAE;AAJwB,GAAD,CAFF;AAAA,MAEjCC,SAFiC;AAAA,MAEtBC,YAFsB;;AAAA,mBASNT,QAAQ,CAAC;AACzCU,IAAAA,IAAI,EAAE;AADmC,GAAD,CATF;AAAA,MASjCC,SATiC;AAAA,MAStBC,YATsB;;AAAA,mBAaJZ,QAAQ,CAAC;AAC3Ca,IAAAA,KAAK,EAAE;AADoC,GAAD,CAbJ;AAAA,MAajCC,UAbiC;AAAA,MAarBC,aAbqB;;AAAA,mBAiBAf,QAAQ,CAAC;AAC/CgB,IAAAA,OAAO,EAAE;AADsC,GAAD,CAjBR;AAAA,MAiBjCC,YAjBiC;AAAA,MAiBnBC,eAjBmB,kBAsBxC;;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAOC,KAAP,EAAcC,QAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEZZ,YAAAA,YAAY,mBAAKD,SAAL;AAAgBJ,cAAAA,aAAa,EAAE;AAA/B,eAAZ;AACAkB,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAHY,CAKZ;;AACMC,YAAAA,WANM,GAMQ;AAClBC,cAAAA,KAAK,wDAEeL,KAFf,6BAEqCC,QAFrC;AADa,aANR;AAAA;AAAA;AAAA,6CAkBQK,KAAK,CAAC,+BAAD,EAAkC;AACvDC,cAAAA,MAAM,EAAE,MAD+C;AAEvDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFiD;AAGvDO,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAH8C,aAAlC,CAlBb;;AAAA;AAkBJC,YAAAA,GAlBI;AA0BVV,YAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,MAAhB,EA1BU,CA4BV;AACA;AACA;AAEA;;AAhCU;AAAA,6CAiCSD,GAAG,CAACE,IAAJ,EAjCT;;AAAA;AAiCJC,YAAAA,IAjCI;;AAAA,iBAoCNA,IAAI,CAACC,MApCC;AAAA;AAAA;AAAA;;AAqCRD,YAAAA,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,UAAAC,KAAK,EAAI;AACvBhB,cAAAA,OAAO,CAACC,GAAR,CAAYe,KAAK,CAACC,OAAlB;AACD,aAFD;AArCQ;;AAAA;AA2CV;AA3CU,+BA4CeJ,IAAI,CAACA,IAAL,CAAUhB,KA5CzB,EA4CFd,MA5CE,oBA4CFA,MA5CE,EA4CMC,KA5CN,oBA4CMA,KA5CN;AA6CVgB,YAAAA,OAAO,CAACC,GAAR,CAAYY,IAAI,CAACA,IAAL,CAAUhB,KAAV,CAAgBd,MAA5B,EA7CU,CA+CV;;AACAiB,YAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AAhDU;AAAA;;AAAA;AAAA;AAAA;AAoDVc,YAAAA,OAAO,CAACC,GAAR;;AApDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AA4EA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7Bf,MAAAA,SAAS,EAATA,SAD6B;AAE7BG,MAAAA,SAAS,EAATA,SAF6B;AAG7BG,MAAAA,UAAU,EAAVA,UAH6B;AAI7BG,MAAAA,YAAY,EAAZA,YAJ6B;AAK7BE,MAAAA,KAAK,EAALA;AAL6B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAehB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAPF,CADF;AAaD,CAhHD;;AAkHA,eAAeF,GAAf","sourcesContent":["import { GlobalContext, GlobalProvider } from '../context/GlobalState';\r\n// import { login } from '../context/Actions';\r\nimport Layout from '../components/Layout';\r\nimport { useState } from 'react';\r\n\r\n// import gql from 'graphql-tag';\r\n\r\n\r\nconst App = ({ Component, pageProps }) => {\r\n\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  const [userState, setUserState] = useState({\r\n    user: null\r\n  });\r\n\r\n  const [videoState, setVideoState] = useState({\r\n    video: null\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n\r\n  // Auth actions\r\n  const login = async (email, password) => {\r\n\r\n    setAuthState({...authState, authenticated: true})\r\n    console.log('login action called in _app.js')\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      console.log(res.status);\r\n\r\n      // if(res.status != 200 || res.status != 201) {\r\n      //   throw new Error('Login failed!');\r\n      // } \r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors){\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Set state with returned auth data\r\n      const { userId, token} = data.data.login;\r\n      console.log(data.data.login.userId)\r\n\r\n      // setAuthState({...authState, authenticated: true, userId: userId, token});\r\n      console.log(authState)\r\n      \r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    // const LOGIN_QUERY = gql`\r\n    //   query LoginQuery{\r\n    //     login(email: ${email}, password: ${password}) {\r\n    //       userId,\r\n    //       token\r\n    //     }\r\n    //   }\r\n    // `;\r\n    // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n  \r\n  \r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      authState,\r\n      userState,\r\n      videoState,\r\n      commentState,\r\n      login\r\n    }}>\r\n      <Layout>\r\n        <Component {...pageProps} />\r\n      </Layout>\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}