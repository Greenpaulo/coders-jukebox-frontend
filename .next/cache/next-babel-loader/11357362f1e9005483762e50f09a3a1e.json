{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\context\\\\GlobalState.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useReducer } from 'react';\nimport gql from 'graphql-tag';\nimport AppReducer from './AppReducer';\nimport { useQuery } from '@apollo/react-hooks';\nimport withApollo from 'next-with-apollo'; // Inital State\n\nconst initialState = {\n  authenticated: false,\n  authData: null,\n  user: null,\n  video: null,\n  comment: null\n}; // Create context\n\nexport const GlobalContext = createContext(initialState); // Provider Component\n\nexport const GlobalProvider = withApollo(({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(AppReducer, initialState); // Actions\n\n  const login = (email, password) => {\n    // Make a API query to get a token\n    const LOGIN_QUERY = gql`\n      query LoginQuery{\n        login(email: ${email}, password: ${password}) {\n          userId,\n          token\n        }\n      }\n    `;\n    const {\n      data\n    } = useQuery(LOGIN_QUERY);\n    dispatch({\n      type: 'LOGIN',\n      payload: {\n        data\n      }\n    });\n  };\n\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      authenticated: state.authenticated,\n      login: login\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n});","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/context/GlobalState.js"],"names":["createContext","useReducer","gql","AppReducer","useQuery","withApollo","initialState","authenticated","authData","user","video","comment","GlobalContext","GlobalProvider","children","state","dispatch","login","email","password","LOGIN_QUERY","data","type","payload"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAAyC,OAAzC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CAGA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,OAAO,MAAMC,aAAa,GAAGZ,aAAa,CAACM,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMO,cAAc,GAAGR,UAAU,CAAC,CAAC;AAAES,EAAAA;AAAF,CAAD,KAAkB;AAEzD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBf,UAAU,CAACE,UAAD,EAAaG,YAAb,CAApC,CAFyD,CAIzD;;AACA,QAAMW,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAEjC;AACA,UAAMC,WAAW,GAAGlB,GAAI;;uBAELgB,KAAM,eAAcC,QAAS;;;;;KAFhD;AAQA,UAAM;AAAEE,MAAAA;AAAF,QAAWjB,QAAQ,CAACgB,WAAD,CAAzB;AAEAJ,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,OAAO,EAAE;AACPF,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAnBD;;AAqBA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7Bd,MAAAA,aAAa,EAAEQ,KAAK,CAACR,aADQ;AAE7BU,MAAAA,KAAK,EAAEA;AAFsB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGH,QAJH,CADF;AAQD,CAlCuC,CAAjC","sourcesContent":["import { createContext, useReducer} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport AppReducer from './AppReducer';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport withApollo from 'next-with-apollo';\r\n\r\n\r\n// Inital State\r\nconst initialState = {\r\n  authenticated: false,\r\n  authData: null,\r\n  user: null,\r\n  video: null,\r\n  comment: null\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = withApollo(({ children }) => {\r\n  \r\n  const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n  // Actions\r\n  const login = (email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const LOGIN_QUERY = gql`\r\n      query LoginQuery{\r\n        login(email: ${email}, password: ${password}) {\r\n          userId,\r\n          token\r\n        }\r\n      }\r\n    `;\r\n    const { data } = useQuery(LOGIN_QUERY);\r\n\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: {\r\n        data\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      authenticated: state.authenticated,\r\n      login: login\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n})"]},"metadata":{},"sourceType":"module"}