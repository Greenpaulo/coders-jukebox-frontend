{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\context\\\\GlobalState.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useReducer } from 'react'; // import gql from 'graphql-tag';\n\nimport AppReducer from './AppReducer'; // import { useQuery } from '@apollo/react-hooks';\n// Inital State\n\nvar initialState = {\n  authenticated: false,\n  authData: null,\n  user: null,\n  video: null,\n  comment: null\n}; // Create context\n\nexport var GlobalContext = createContext(initialState); // Provider Component\n\nexport var GlobalProvider = function GlobalProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(AppReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // Actions\n\n\n  var login = function login(email, password) {\n    // Make a API query to get a token\n    // const LOGIN_QUERY = gql`\n    //   query LoginQuery{\n    //     login(email: ${email}, password: ${password}) {\n    //       userId,\n    //       token\n    //     }\n    //   }\n    // `;\n    // const { data } = useQuery(LOGIN_QUERY);\n    dispatch({\n      type: 'LOGIN',\n      payload: {\n        data: data\n      }\n    });\n  };\n\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      // authenticated: state.authenticated,\n      login: login\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/context/GlobalState.js"],"names":["createContext","useReducer","AppReducer","initialState","authenticated","authData","user","video","comment","GlobalContext","GlobalProvider","children","state","dispatch","login","email","password","type","payload","data"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAAyC,OAAzC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;AAEA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,OAAO,IAAMC,aAAa,GAAGT,aAAa,CAACG,YAAD,CAAnC,C,CAEP;;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBAEpBV,UAAU,CAACC,UAAD,EAAaC,YAAb,CAFU;AAAA,MAEvCS,KAFuC;AAAA,MAEhCC,QAFgC,mBAI9C;;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAJA;AADO;AAFF,KAAD,CAAR;AAMD,GAnBD;;AAqBA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7B;AACAL,MAAAA,KAAK,EAAEA;AAFsB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGH,QAJH,CADF;AAQD,CAlCM","sourcesContent":["import { createContext, useReducer} from 'react';\r\n// import gql from 'graphql-tag';\r\nimport AppReducer from './AppReducer';\r\n// import { useQuery } from '@apollo/react-hooks';\r\n\r\n// Inital State\r\nconst initialState = {\r\n  authenticated: false,\r\n  authData: null,\r\n  user: null,\r\n  video: null,\r\n  comment: null\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n  \r\n  const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n  // Actions\r\n  const login = (email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    // const LOGIN_QUERY = gql`\r\n    //   query LoginQuery{\r\n    //     login(email: ${email}, password: ${password}) {\r\n    //       userId,\r\n    //       token\r\n    //     }\r\n    //   }\r\n    // `;\r\n    // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: {\r\n        data\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      // authenticated: state.authenticated,\r\n      login: login\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}