{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { GlobalContext, GlobalProvider } from '../context/GlobalState'; // import { login } from '../context/Actions';\n\nimport Layout from '../components/Layout';\nimport { useState } from 'react'; // import gql from 'graphql-tag';\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  const {\n    0: authState,\n    1: setAuthState\n  } = useState({\n    authenticated: false,\n    userId: null,\n    token: null,\n    tokenExpiration: null\n  });\n  const {\n    0: userState,\n    1: setUserState\n  } = useState({\n    user: null\n  });\n  const {\n    0: videoState,\n    1: setVideoState\n  } = useState({\n    video: null\n  });\n  const {\n    0: commentState,\n    1: setCommentState\n  } = useState({\n    comment: null\n  }); // Auth actions\n\n  const login = async (email, password) => {\n    console.log('login action called in _app.js'); // Make a API query to get a token\n\n    const requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId,\n            token\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(res.status); // if(res.status != 200 || res.status != 201) {\n      //   throw new Error('Login failed!');\n      // } \n      // .json() is a method from fetch API that auto extracts & parses the res body\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Set state with returned auth data\n\n\n      const {\n        userId,\n        token\n      } = data.data.login;\n      console.log(data.data.login.userId);\n      setAuthState({\n        authenticated: true,\n        userId: userId,\n        token: token\n      });\n      console.log(authState);\n    } catch (err) {\n      console.log(err);\n    } // const LOGIN_QUERY = gql`\n    //   query LoginQuery{\n    //     login(email: ${email}, password: ${password}) {\n    //       userId,\n    //       token\n    //     }\n    //   }\n    // `;\n    // const { data } = useQuery(LOGIN_QUERY);\n\n  };\n\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      authState,\n      userState,\n      videoState,\n      commentState,\n      login\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/pages/_app.js"],"names":["GlobalContext","GlobalProvider","Layout","useState","App","Component","pageProps","authState","setAuthState","authenticated","userId","token","tokenExpiration","userState","setUserState","user","videoState","setVideoState","video","commentState","setCommentState","comment","login","email","password","console","log","requestBody","query","res","fetch","method","body","JSON","stringify","headers","status","data","json","errors","map","error","message","err"],"mappings":"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","sourcesContent":["import { GlobalContext, GlobalProvider } from '../context/GlobalState';\r\n// import { login } from '../context/Actions';\r\nimport Layout from '../components/Layout';\r\nimport { useState } from 'react';\r\n\r\n// import gql from 'graphql-tag';\r\n\r\n\r\nconst App = ({ Component, pageProps }) => {\r\n\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  const [userState, setUserState] = useState({\r\n    user: null\r\n  });\r\n\r\n  const [videoState, setVideoState] = useState({\r\n    video: null\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n\r\n  // Auth actions\r\n  const login = async (email, password) => {\r\n    console.log('login action called in _app.js')\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      console.log(res.status);\r\n\r\n      // if(res.status != 200 || res.status != 201) {\r\n      //   throw new Error('Login failed!');\r\n      // } \r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors){\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Set state with returned auth data\r\n      const { userId, token} = data.data.login;\r\n      console.log(data.data.login.userId)\r\n\r\n      setAuthState({authenticated: true, userId: userId, token: token});\r\n      console.log(authState)\r\n      \r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    // const LOGIN_QUERY = gql`\r\n    //   query LoginQuery{\r\n    //     login(email: ${email}, password: ${password}) {\r\n    //       userId,\r\n    //       token\r\n    //     }\r\n    //   }\r\n    // `;\r\n    // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n  \r\n  \r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      authState,\r\n      userState,\r\n      videoState,\r\n      commentState,\r\n      login\r\n    }}>\r\n      <Layout>\r\n        <Component {...pageProps} />\r\n      </Layout>\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}