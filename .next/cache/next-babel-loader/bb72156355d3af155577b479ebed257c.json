{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Coding\\\\MyProjects\\\\coders-jukebox-frontend\\\\pages\\\\_app.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { GlobalContext, GlobalProvider } from '../context/GlobalState'; // import { login } from '../context/Actions';\n\nimport Layout from '../components/Layout';\nimport { useState } from 'react'; // import gql from 'graphql-tag';\n\nvar App = function App(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState({\n    authenticated: false,\n    authData: null\n  }),\n      authState = _useState[0],\n      setAuthState = _useState[1];\n\n  var _useState2 = useState({\n    user: null\n  }),\n      userState = _useState2[0],\n      setUserState = _useState2[1];\n\n  var _useState3 = useState({\n    video: null\n  }),\n      videoState = _useState3[0],\n      setVideoState = _useState3[1];\n\n  var _useState4 = useState({\n    comment: null\n  }),\n      commentState = _useState4[0],\n      setCommentState = _useState4[1]; // Auth actions\n\n\n  var login = function login(email, password) {\n    var requestBody, res;\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('login action called in _app.js'); // Make a API query to get a token\n\n            requestBody = {\n              query: \"\\n        query {\\n          login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\") {\\n            userId,\\n            token\\n          }\\n        }\\n      \")\n            };\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:5000/graphql', {\n              method: 'POST',\n              body: JSON.stringify(requestBody),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 5:\n            res = _context.sent;\n\n            if (!(res.status !== 200 || res.status !== 201)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error('Login failed!');\n\n          case 8:\n            return _context.abrupt(\"return\", res.json());\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 11]], Promise);\n  };\n\n  return __jsx(GlobalContext.Provider, {\n    value: {\n      authState: authState,\n      userState: userState,\n      videoState: videoState,\n      commentState: commentState,\n      login: login\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox-frontend/pages/_app.js"],"names":["GlobalContext","GlobalProvider","Layout","useState","App","Component","pageProps","authenticated","authData","authState","setAuthState","user","userState","setUserState","video","videoState","setVideoState","comment","commentState","setCommentState","login","email","password","console","log","requestBody","query","fetch","method","body","JSON","stringify","headers","res","status","Error","json"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,wBAA9C,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAA8B;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBAENH,QAAQ,CAAC;AACzCI,IAAAA,aAAa,EAAE,KAD0B;AAEzCC,IAAAA,QAAQ,EAAE;AAF+B,GAAD,CAFF;AAAA,MAEjCC,SAFiC;AAAA,MAEtBC,YAFsB;;AAAA,mBAONP,QAAQ,CAAC;AACzCQ,IAAAA,IAAI,EAAE;AADmC,GAAD,CAPF;AAAA,MAOjCC,SAPiC;AAAA,MAOtBC,YAPsB;;AAAA,mBAWJV,QAAQ,CAAC;AAC3CW,IAAAA,KAAK,EAAE;AADoC,GAAD,CAXJ;AAAA,MAWjCC,UAXiC;AAAA,MAWrBC,aAXqB;;AAAA,mBAeAb,QAAQ,CAAC;AAC/Cc,IAAAA,OAAO,EAAE;AADsC,GAAD,CAfR;AAAA,MAejCC,YAfiC;AAAA,MAenBC,eAfmB,kBAoBxC;;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAOC,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EADY,CAGZ;;AACMC,YAAAA,WAJM,GAIQ;AAClBC,cAAAA,KAAK,wDAEeL,KAFf,6BAEqCC,QAFrC;AADa,aAJR;AAAA;AAAA;AAAA,6CAgBQK,KAAK,CAAC,+BAAD,EAAkC;AACvDC,cAAAA,MAAM,EAAE,MAD+C;AAEvDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFiD;AAGvDO,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAH8C,aAAlC,CAhBb;;AAAA;AAgBJC,YAAAA,GAhBI;;AAAA,kBAwBPA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAxB9B;AAAA;AAAA;AAAA;;AAAA,kBAyBF,IAAIC,KAAJ,CAAU,eAAV,CAzBE;;AAAA;AAAA,6CA6BHF,GAAG,CAACG,IAAJ,EA7BG;;AAAA;AAAA;AAAA;AAgCVb,YAAAA,OAAO,CAACC,GAAR;;AAhCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAsDA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7Bf,MAAAA,SAAS,EAATA,SAD6B;AAE7BG,MAAAA,SAAS,EAATA,SAF6B;AAG7BG,MAAAA,UAAU,EAAVA,UAH6B;AAI7BG,MAAAA,YAAY,EAAZA,YAJ6B;AAK7BE,MAAAA,KAAK,EAALA;AAL6B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAed,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAPF,CADF;AAaD,CAxFD;;AA0FA,eAAeF,GAAf","sourcesContent":["import { GlobalContext, GlobalProvider } from '../context/GlobalState';\r\n// import { login } from '../context/Actions';\r\nimport Layout from '../components/Layout';\r\nimport { useState } from 'react';\r\n\r\n// import gql from 'graphql-tag';\r\n\r\n\r\nconst App = ({ Component, pageProps }) => {\r\n\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    authData: null\r\n  });\r\n\r\n  const [userState, setUserState] = useState({\r\n    user: null\r\n  });\r\n\r\n  const [videoState, setVideoState] = useState({\r\n    video: null\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n\r\n  // Auth actions\r\n  const login = async (email, password) => {\r\n    console.log('login action called in _app.js')\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if(res.status !== 200 || res.status !== 201) {\r\n        throw new Error('Login failed!');\r\n      } \r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      return res.json();\r\n      \r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    \r\n\r\n\r\n    // const LOGIN_QUERY = gql`\r\n    //   query LoginQuery{\r\n    //     login(email: ${email}, password: ${password}) {\r\n    //       userId,\r\n    //       token\r\n    //     }\r\n    //   }\r\n    // `;\r\n    // const { data } = useQuery(LOGIN_QUERY);\r\n\r\n  }\r\n\r\n  \r\n\r\n  \r\n  \r\n  \r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      authState,\r\n      userState,\r\n      videoState,\r\n      commentState,\r\n      login\r\n    }}>\r\n      <Layout>\r\n        <Component {...pageProps} />\r\n      </Layout>\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}